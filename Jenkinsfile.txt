def img
pipeline {
    agent any
    environment {
        registry="614566190192.dkr.ecr.us-east-1.amazonaws.com/myecr"
        dockerImage=""
    }
    stages {
        stage("checkout") {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/Ashlesh12342/pythonDjango.git']]])
                
            }
        }
        
        stage("creating virtual env") {
            
            steps {
                
                withEnv(['PYTHON_HOME=/usr/bin/python3']) {
                    sh "$PYTHON_HOME -V"
                    sh "$PYTHON_HOME -m venv myenv"
                    sh ". myenv/bin/activate"
                    sh "pip install -r requirement.txt"
                }
                // sh "pip install -r requirements.txt"
            }
        }
        stage("unit testing"){
            steps {
                //sh ". myenv/bin/activate"
                
                sh "python3 -m pytest --junitxml=output.xml"
                // sh "python3 -m pytest caltests.py --html=report.html"
            
            }
        }
        
        stage("static code analysis") {
          environment {
               scannerhome=tool 'sonar-scanner'
           }
           steps {
               script {
                   withSonarQubeEnv('sonarqube') {

                         sh '${scannerhome}/bin/sonar-scanner'

                     }
               }
           }
         }
         
         stage("Quality Gate") {
            steps {
             waitForQualityGate abortPipeline: true, credentialsId: 'sonarqube'
            }
          }
          
          stage("build image") {
            steps {
                script {
                    img=registry 
                    dockerImage=docker.build("${img}")
                }
            }
        }
        
        stage("push to ECR") {
            steps {
                script {
                    sh "aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 614566190192.dkr.ecr.us-east-1.amazonaws.com"
                    sh "docker push 614566190192.dkr.ecr.us-east-1.amazonaws.com/myecr:latest"
                    }
                }
            }
            
        stage("Deploy"){
            steps{
                sh "aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin 614566190192.dkr.ecr.us-east-1.amazonaws.com"
                sh "docker run -d -p 8000:8000 614566190192.dkr.ecr.us-east-1.amazonaws.com/myecr:latest"
            }
        }
        
    }
}